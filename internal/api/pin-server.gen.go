// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List pin objects
	// (GET /pins)
	GetPins(ctx echo.Context, params GetPinsParams) error
	// Add pin object
	// (POST /pins)
	AddPin(ctx echo.Context) error
	// Remove pin object
	// (DELETE /pins/{requestid})
	DeletePinByRequestId(ctx echo.Context, requestid string) error
	// Get pin object
	// (GET /pins/{requestid})
	GetPinByRequestId(ctx echo.Context, requestid string) error
	// Replace pin object
	// (POST /pins/{requestid})
	ReplacePinByRequestId(ctx echo.Context, requestid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPins converts echo context to params.
func (w *ServerInterfaceWrapper) GetPins(ctx echo.Context) error {
	var err error

	ctx.Set(AccessTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPinsParams
	// ------------- Optional query parameter "cid" -------------

	err = runtime.BindQueryParameter("form", false, false, "cid", ctx.QueryParams(), &params.Cid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cid: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "match" -------------

	err = runtime.BindQueryParameter("form", true, false, "match", ctx.QueryParams(), &params.Match)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter match: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", false, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "before" -------------

	err = runtime.BindQueryParameter("form", true, false, "before", ctx.QueryParams(), &params.Before)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "meta" -------------

	if paramValue := ctx.QueryParam("meta"); paramValue != "" {

		var value Meta
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshalling parameter 'meta' as JSON")
		}
		params.Meta = &value

	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPins(ctx, params)
	return err
}

// AddPin converts echo context to params.
func (w *ServerInterfaceWrapper) AddPin(ctx echo.Context) error {
	var err error

	ctx.Set(AccessTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPin(ctx)
	return err
}

// DeletePinByRequestId converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePinByRequestId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "requestid" -------------
	var requestid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestid", runtime.ParamLocationPath, ctx.Param("requestid"), &requestid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requestid: %s", err))
	}

	ctx.Set(AccessTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePinByRequestId(ctx, requestid)
	return err
}

// GetPinByRequestId converts echo context to params.
func (w *ServerInterfaceWrapper) GetPinByRequestId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "requestid" -------------
	var requestid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestid", runtime.ParamLocationPath, ctx.Param("requestid"), &requestid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requestid: %s", err))
	}

	ctx.Set(AccessTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPinByRequestId(ctx, requestid)
	return err
}

// ReplacePinByRequestId converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacePinByRequestId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "requestid" -------------
	var requestid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestid", runtime.ParamLocationPath, ctx.Param("requestid"), &requestid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter requestid: %s", err))
	}

	ctx.Set(AccessTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacePinByRequestId(ctx, requestid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pins", wrapper.GetPins)
	router.POST(baseURL+"/pins", wrapper.AddPin)
	router.DELETE(baseURL+"/pins/:requestid", wrapper.DeletePinByRequestId)
	router.GET(baseURL+"/pins/:requestid", wrapper.GetPinByRequestId)
	router.POST(baseURL+"/pins/:requestid", wrapper.ReplacePinByRequestId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"YWZKKujCYs09XVr07tPd/wsAAP//C5erxUNeAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
