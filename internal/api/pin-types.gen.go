// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package api

import (
	"time"
)

const (
	AccessTokenScopes = "accessToken.Scopes"
)

// Defines values for PinningStatus.
const (
	Failed  PinningStatus = "failed"
	Pinned  PinningStatus = "pinned"
	Pinning PinningStatus = "pinning"
	Queued  PinningStatus = "queued"
)

// Defines values for TextMatchingStrategy.
const (
	Exact    TextMatchingStrategy = "exact"
	Iexact   TextMatchingStrategy = "iexact"
	Ipartial TextMatchingStrategy = "ipartial"
	Partial  TextMatchingStrategy = "partial"
)

// Delegates List of multiaddrs designated by pinning service that will receive the pin data; see Provider Hints in the docs
type Delegates = []string

// Failure Response for a failed request
type Failure struct {
	Error struct {
		// Details Optional, longer description of the error; may include UUID of transaction for support, links to documentation etc
		Details *string `json:"details,omitempty"`

		// Reason Mandatory string identifying the type of error
		Reason string `json:"reason"`
	} `json:"error"`
}

// Origins Optional list of multiaddrs known to provide the data; see Provider Hints in the docs
type Origins = []string

// Pin Pin object
type Pin struct {
	// Cid Content Identifier (CID) to be pinned recursively
	Cid string `json:"cid"`

	// Meta Optional metadata for pin object
	Meta *PinMeta `json:"meta,omitempty"`

	// Name Optional name for pinned data; can be used for lookups later
	Name *string `json:"name,omitempty"`

	// Origins Optional list of multiaddrs known to provide the data; see Provider Hints in the docs
	Origins *Origins `json:"origins,omitempty"`
}

// PinMeta Optional metadata for pin object
type PinMeta map[string]string

// PinResults Response used for listing pin objects matching request
type PinResults struct {
	// Count The total number of pin objects that exist for passed query filters
	Count int32 `json:"count"`

	// Results An array of PinStatus results
	Results []PinStatus `json:"results"`
}

// PinStatus Pin object with status
type PinStatus struct {
	// Created Immutable timestamp indicating when a pin request entered a pinning service; can be used for filtering results and pagination
	Created time.Time `json:"created"`

	// Delegates List of multiaddrs designated by pinning service that will receive the pin data; see Provider Hints in the docs
	Delegates Delegates `json:"delegates"`

	// Info Optional info for PinStatus response
	Info *StatusInfo `json:"info,omitempty"`

	// Pin Pin object
	Pin Pin `json:"pin"`

	// Requestid Globally unique identifier of the pin request; can be used to check the status of ongoing pinning, or pin removal
	Requestid string `json:"requestid"`

	// Status Status a pin object can have at a pinning service
	PinningStatus PinningStatus `json:"status"`
}

// PinningStatus Status a pin object can have at a pinning service
type PinningStatus string

// StatusInfo Optional info for PinStatus response
type StatusInfo map[string]string

// TextMatchingStrategy Alternative text matching strategy
type TextMatchingStrategy string

// After defines model for after.
type After = time.Time

// Before defines model for before.
type Before = time.Time

// Cid defines model for cid.
type Cid = []string

// Limit defines model for limit.
type Limit = int32

// Match Alternative text matching strategy
type Match = TextMatchingStrategy

// Meta Optional metadata for pin object
type Meta = PinMeta

// Name defines model for name.
type Name = string

// Status defines model for status.
type Status = []PinningStatus

// BadRequest Response for a failed request
type BadRequest = Failure

// CustomServiceError Response for a failed request
type CustomServiceError = Failure

// InsufficientFunds Response for a failed request
type InsufficientFunds = Failure

// InternalServerError Response for a failed request
type InternalServerError = Failure

// NotFound Response for a failed request
type NotFound = Failure

// Unauthorized Response for a failed request
type Unauthorized = Failure

// GetPinsParams defines parameters for GetPins.
type GetPinsParams struct {
	// Cid Return pin objects responsible for pinning the specified CID(s); be aware that using longer hash functions introduces further constraints on the number of CIDs that will fit under the limit of 2000 characters per URL  in browser contexts
	Cid *Cid `form:"cid,omitempty" json:"cid,omitempty"`

	// Name Return pin objects with specified name (by default a case-sensitive, exact match)
	Name *Name `form:"name,omitempty" json:"name,omitempty"`

	// Match Customize the text matching strategy applied when the name filter is present; exact (the default) is a case-sensitive exact match, partial matches anywhere in the name, iexact and ipartial are case-insensitive versions of the exact and partial strategies
	Match *Match `form:"match,omitempty" json:"match,omitempty"`

	// Status Return pin objects for pins with the specified status (when missing, service should default to pinned only)
	Status *Status `form:"status,omitempty" json:"status,omitempty"`

	// Before Return results created (queued) before provided timestamp
	Before *Before `form:"before,omitempty" json:"before,omitempty"`

	// After Return results created (queued) after provided timestamp
	After *After `form:"after,omitempty" json:"after,omitempty"`

	// Limit Max records to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Meta Return pin objects that match specified metadata keys passed as a string representation of a JSON object; when implementing a client library, make sure the parameter is URL-encoded to ensure safe transport
	Meta *Meta `form:"meta,omitempty" json:"meta,omitempty"`
}

// AddPinJSONRequestBody defines body for AddPin for application/json ContentType.
type AddPinJSONRequestBody = Pin

// ReplacePinByRequestIdJSONRequestBody defines body for ReplacePinByRequestId for application/json ContentType.
type ReplacePinByRequestIdJSONRequestBody = Pin
